{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "path": "67239a31-82ab-488f-a35e-d8a2a11f741b",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        180
      ],
      "id": "3964fca0-4b9c-4fac-a6a6-4c20af3093b5",
      "name": "Webhook GET",
      "webhookId": "67239a31-82ab-488f-a35e-d8a2a11f741b"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query['hub.challenge'] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        300,
        180
      ],
      "id": "9247e6db-ef28-4364-923a-f6c4f9ed876c",
      "name": "Webhook Challenges"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "67239a31-82ab-488f-a35e-d8a2a11f741b",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        540
      ],
      "id": "f26e3c7d-bbe0-4d51-a610-cf149d7314bd",
      "name": "Webhook POST",
      "webhookId": "67239a31-82ab-488f-a35e-d8a2a11f741b"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "23a9e25a-897b-4c30-9231-f770e25af596",
              "name": "body.entry[0].changes[0].value.from.id",
              "value": "={{ $json.body.entry[0].changes[0].value.from.id }}",
              "type": "string"
            },
            {
              "id": "65c0698a-7ec5-43bf-b910-c9054c8a6175",
              "name": "body.entry[0].changes[0].value.from.username",
              "value": "={{ $json.body.entry[0].changes[0].value.from.username }}",
              "type": "string"
            },
            {
              "id": "47402da1-20c0-44ef-bcd0-1301d70d8919",
              "name": "body.entry[0].changes[0].value.id",
              "value": "={{ $json.body.entry[0].changes[0].value.id }}",
              "type": "string"
            },
            {
              "id": "dc077957-dd5e-4cba-a0c0-e56c39e48340",
              "name": "body.entry[0].changes[0].value.text",
              "value": "={{ $json.body.entry[0].changes[0].value.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        540
      ],
      "id": "00b75108-c286-435c-90f2-7f28514ac1a2",
      "name": "Handle Comment Data"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.instagram.com/v22.0/{{$json.body.entry[0].changes[0].value.id}}/replies\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.comment }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1500,
        620
      ],
      "id": "196be8ab-3ff6-4000-a7d5-5f1406b100c3",
      "name": "Reply IG Comments",
      "credentials": {
        "httpHeaderAuth": {
          "id": "NpWH1IXaxuGz77EU",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "67Bku1ikgTiISFKE",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "00520e94-db82-40c7-b527-994b5e06304c",
              "leftValue": "={{ $json.body.entry[0].changes[0].value.from.username }}",
              "rightValue": "{your username}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "2db550b7-4d08-4720-846b-2bb1db04a6c7",
              "leftValue": "={{ $json.body.entry[0].changes[0].value.from.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "8b5da3e7-66b3-471d-a5dd-c593f9b82898",
              "leftValue": "={{ $json.body.entry[0].changes[0].value.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "d20c2f3d-c4ed-49a4-aa2c-5768a137002f",
              "leftValue": "={{ $json.body.entry[0].changes[0].value.text }}",
              "rightValue": "AI",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        560,
        540
      ],
      "id": "c25209c6-aba9-4e08-972c-4dc7a75c6fd0",
      "name": "Filter"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.instagram.com/v22.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\n    \"id\": \"{{ $json.body.entry[0].changes[0].value.from.id }}\"\n  },\n  \"message\": {\n    \"text\": \"{{ $json.dm }}\"\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1500,
        420
      ],
      "id": "edc75490-1c6e-4935-871a-0fbc6cac3dd6",
      "name": "Send DM",
      "credentials": {
        "httpHeaderAuth": {
          "id": "NpWH1IXaxuGz77EU",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a professional content creator. I want you to do two things for each person who comments on my Instagram reel :\n\nWrite exactly one custom comment reply that tells them to check their DMs. It should be friendly and engaging, like:\n\"Sent you a DM, check it out {emoji}\", \"Just messaged you {emoji}\", or \"You should have it now {emoji}\".\nUse your own variation with a natural tone.\n\nEach time, assume the user commented on a reel asking for a secret link. Be friendly, include an emoji, and keep it natural.\n\nWrite exactly one short DM message that includes a link. Assume they commented asking for a \"secret link\" mentioned in my reel. Example:\n\"Hey there {emoji}, I saw your comment about the secret link. Here it is: [insert link]\"\n\nFormat your response in JSON like this:\n{\n  \"comment\": \"your custom comment reply here\",\n  \"dm\": \"your direct message here\"\n}\n\nThe link to insert is : https://www.soluvia.co/en/templates"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        720,
        300
      ],
      "id": "9c31e4d6-e670-49f2-b9e3-e2c501b1d028",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "ZUG8n5FeAed2bMGK",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1200,
        520
      ],
      "id": "b8810903-5017-474b-9e15-39b822253735",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const content = $json.message.content;\n\ntry {\n  const parsed = JSON.parse(content);\n\n  // If it's an array, return first item only\n  if (Array.isArray(parsed)) {\n    return [{ json: parsed[0] }];\n  }\n\n  // Otherwise, return the parsed object\n  return [{ json: parsed }];\n} catch (e) {\n  throw new Error(\"Failed to parse AI response as JSON.\");\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        300
      ],
      "id": "efc4976c-cca3-4833-b4bf-337dfb4f0c69",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## Step 1: Listening to Webhooks \nYou must set up a meta developer account.\n",
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "ec27e899-05db-4818-ba7a-ba72a5b88082",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Step 2: Handling the data\nWe set which part of data we want to keep from the received data.",
        "width": 400,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        360
      ],
      "id": "2687172f-d082-4e93-a70d-a05b1d6a73a1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Step 3: Filter data & send to AI\nHere we filter the data, then send it to AI to create custom comments and dm messages. We create a JS function to transform the output of the AI generated data.",
        "width": 380,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        120
      ],
      "id": "a43e9020-97d0-471c-801e-7cde5115e04d",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Step 4: Merge webhook & AI generated data to make HTTP requests\nHere we merge the initial received data and the generated data. Then, we send http requests to meta to reply to comments, and send dms.",
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1200,
        240
      ],
      "id": "e64be9ff-dfd2-45aa-bd3d-3657b6cad506",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {
    "Handle Comment Data": [
      {
        "json": {
          "body": {
            "entry": [
              {
                "changes": [
                  {
                    "value": {
                      "from": {
                        "id": "682554924370210",
                        "username": "onriscoding"
                      },
                      "id": "18117829210413466",
                      "text": "test"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    ],
    "Webhook POST": [
      {
        "json": {
          "body": {
            "entry": [
              {
                "changes": [
                  {
                    "value": {
                      "from": {
                        "id": "682554924370210",
                        "username": "onriscoding"
                      },
                      "id": "18117829210413466",
                      "text": "test"
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    ]
  },
  "connections": {
    "Webhook GET": {
      "main": [
        [
          {
            "node": "Webhook Challenges",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook POST": {
      "main": [
        [
          {
            "node": "Handle Comment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Comment Data": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Reply IG Comments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send DM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0e18e0d8-754f-4a2a-a657-1e6fbce6c73b",
  "meta": {
    "instanceId": "aae22c9b08c1243301af71cbfb5c0f353a136c0cfbee86abbaecb452d60e0f61"
  },
  "id": "JQF4s4CbJTSQF4Gp",
  "tags": []
}